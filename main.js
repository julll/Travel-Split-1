// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã TravelSplit

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTrips = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ TravelSplit');

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (window.db) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        window.db.addListener(loadTrips);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–µ–∑–¥–∫–∏
        loadTrips();
    } else {
        console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    setupEventListeners();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    const createTripForm = document.getElementById('create-trip-form');
    if (createTripForm) {
        createTripForm.addEventListener('submit', handleCreateTrip);
    }

    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    const editTripForm = document.getElementById('edit-trip-form');
    if (editTripForm) {
        editTripForm.addEventListener('submit', handleEditTrip);
    }

    // –§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞
    const importFile = document.getElementById('import-file');
    if (importFile) {
        importFile.addEventListener('change', handleImportFile);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            hideAllModals();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            hideAllModals();
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–µ–∑–¥–æ–∫
function loadTrips() {
    if (!window.db) return;

    currentTrips = window.db.getAllTrips();
    renderTrips();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫
function renderTrips() {
    const tripsList = document.getElementById('trips-list');
    if (!tripsList) return;

    if (currentTrips.length === 0) {
        tripsList.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-suitcase-rolling"></i>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤</p>
            </div>
        `;
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedTrips = [...currentTrips].sort((a, b) => 
        new Date(b.createdAt || 0) - new Date(a.createdAt || 0)
    );

    tripsList.innerHTML = sortedTrips.map(trip => createTripCard(trip)).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–µ–∑–¥–∫–∏
function createTripCard(trip) {
    const totalExpenses = trip.expenses ? trip.expenses.reduce((sum, expense) => sum + expense.amount, 0) : 0;
    const participantsCount = trip.participants ? trip.participants.length : 0;
    const expensesCount = trip.expenses ? trip.expenses.length : 0;

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    let dateRange = '';
    if (trip.startDate && trip.endDate) {
        const startDate = new Date(trip.startDate).toLocaleDateString('ru-RU');
        const endDate = new Date(trip.endDate).toLocaleDateString('ru-RU');
        dateRange = startDate === endDate ? startDate : `${startDate} - ${endDate}`;
    } else if (trip.startDate) {
        dateRange = new Date(trip.startDate).toLocaleDateString('ru-RU');
    }

    return `
        <div class="trip-card" onclick="openTrip(${trip.id})">
            <div class="trip-card-header">
                <h3 class="trip-name">${escapeHtml(trip.name)}</h3>
                <div class="trip-actions">
                    <button class="btn-icon" onclick="event.stopPropagation(); editTrip(${trip.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn-icon btn-danger" onclick="event.stopPropagation(); deleteTrip(${trip.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>

            <div class="trip-card-body">
                ${trip.location ? `
                    <div class="trip-location">
                        <i class="fas fa-map-marker-alt"></i>
                        ${escapeHtml(trip.location)}
                    </div>
                ` : ''}

                ${dateRange ? `
                    <div class="trip-dates">
                        <i class="fas fa-calendar"></i>
                        ${dateRange}
                    </div>
                ` : ''}

                <div class="trip-stats">
                    <div class="stat">
                        <i class="fas fa-users"></i>
                        <span>${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫${getPlural(participantsCount, '', '–∞', '–æ–≤')}</span>
                    </div>
                    <div class="stat">
                        <i class="fas fa-receipt"></i>
                        <span>${expensesCount} —Ä–∞—Å—Ö–æ–¥${getPlural(expensesCount, '', '–∞', '–æ–≤')}</span>
                    </div>
                    <div class="stat total-amount">
                        <i class="fas fa-ruble-sign"></i>
                        <span>${formatCurrency(totalExpenses)}</span>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–µ–∑–¥–∫–∏
function openTrip(tripId) {
    window.location.href = `trip.html?id=${tripId}`;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
function showCreateTripModal() {
    const modal = document.getElementById('create-trip-modal');
    if (modal) {
        modal.style.display = 'block';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        const startDateInput = document.getElementById('trip-start-date');
        if (startDateInput) {
            startDateInput.value = new Date().toISOString().split('T')[0];
        }

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameInput = document.getElementById('trip-name');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
function hideCreateTripModal() {
    const modal = document.getElementById('create-trip-modal');
    if (modal) {
        modal.style.display = 'none';

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('create-trip-form');
        if (form) {
            form.reset();
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
async function handleCreateTrip(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const tripData = {
        name: formData.get('name').trim(),
        location: formData.get('location').trim(),
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate')
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!tripData.name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
    if (tripData.startDate && tripData.endDate && tripData.startDate > tripData.endDate) {
        showNotification('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'error');
        return;
    }

    try {
        const tripId = await window.db.createTrip(tripData);
        if (tripId) {
            hideCreateTripModal();
            showNotification('–ü–æ–µ–∑–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
            loadTrips();
        } else {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
function editTrip(tripId) {
    const trip = window.db.getTripById(tripId);
    if (!trip) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('edit-trip-id').value = tripId;
    document.getElementById('edit-trip-name').value = trip.name || '';
    document.getElementById('edit-trip-location').value = trip.location || '';
    document.getElementById('edit-trip-start-date').value = trip.startDate || '';
    document.getElementById('edit-trip-end-date').value = trip.endDate || '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('edit-trip-modal');
    if (modal) {
        modal.style.display = 'block';

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameInput = document.getElementById('edit-trip-name');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function hideEditTripModal() {
    const modal = document.getElementById('edit-trip-modal');
    if (modal) {
        modal.style.display = 'none';

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('edit-trip-form');
        if (form) {
            form.reset();
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
async function handleEditTrip(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const tripId = parseInt(formData.get('id') || document.getElementById('edit-trip-id').value);
    const tripData = {
        name: formData.get('name').trim(),
        location: formData.get('location').trim(),
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate')
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!tripData.name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
    if (tripData.startDate && tripData.endDate && tripData.startDate > tripData.endDate) {
        showNotification('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'error');
        return;
    }

    try {
        const success = await window.db.updateTrip(tripId, tripData);
        if (success) {
            hideEditTripModal();
            showNotification('–ü–æ–µ–∑–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
            loadTrips();
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
async function deleteTrip(tripId) {
    const trip = window.db.getTripById(tripId);
    if (!trip) return;

    const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É "${trip.name}"?\n\n–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.`);
    if (!confirmed) return;

    try {
        const success = await window.db.deleteTrip(tripId);
        if (success) {
            showNotification('–ü–æ–µ–∑–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            loadTrips();
        } else {
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    try {
        const data = {
            trips: currentTrips,
            exportDate: new Date().toISOString(),
            version: '2.0'
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `travelsplit-backup-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        URL.revokeObjectURL(url);
        showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function importData() {
    const fileInput = document.getElementById('import-file');
    if (fileInput) {
        fileInput.click();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞
function handleImportFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async function(e) {
        try {
            const data = JSON.parse(e.target.result);

            if (!data.trips || !Array.isArray(data.trips)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }

            const confirmed = confirm(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${data.trips.length} –ø–æ–µ–∑–¥–æ–∫?\n\n–≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.`);
            if (!confirmed) return;

            let importedCount = 0;
            for (const tripData of data.trips) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                const newTripData = {
                    ...tripData,
                    id: undefined, // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π ID
                    createdAt: new Date().toISOString()
                };

                const tripId = await window.db.createTrip(newTripData);
                if (tripId) {
                    importedCount++;
                }
            }

            showNotification(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ø–æ–µ–∑–¥–æ–∫!`, 'success');
            loadTrips();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    };

    reader.readAsText(file);

    // –û—á–∏—â–∞–µ–º input –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    event.target.value = '';
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏
function shareData() {
    try {
        const data = {
            trips: currentTrips,
            exportDate: new Date().toISOString(),
            version: '2.0'
        };

        const dataStr = JSON.stringify(data);
        const encodedData = btoa(encodeURIComponent(dataStr));
        const shareUrl = `${window.location.origin}${window.location.pathname}?import=${encodedData}`;

        if (navigator.share) {
            navigator.share({
                title: 'TravelSplit - –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏',
                text: '–î–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –∏–∑ TravelSplit',
                url: shareUrl
            });
        } else if (navigator.clipboard) {
            navigator.clipboard.writeText(shareUrl).then(() => {
                showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            });
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = shareUrl;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏', 'error');
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function hideAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        max-width: 300px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        animation: slideInRight 0.3s ease;
        ${type === 'success' ? 'background: linear-gradient(135deg, #38a169, #48bb78);' : ''}
        ${type === 'error' ? 'background: linear-gradient(135deg, #e53e3e, #fc8181);' : ''}
        ${type === 'info' ? 'background: linear-gradient(135deg, #3182ce, #63b3ed);' : ''}
    `;

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 4000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 2
    }).format(amount);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
function getPlural(number, one, two, five) {
    const n = Math.abs(number) % 100;
    const n1 = n % 10;

    if (n > 10 && n < 20) return five;
    if (n1 > 1 && n1 < 5) return two;
    if (n1 === 1) return one;
    return five;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const importData = urlParams.get('import');

    if (importData) {
        try {
            const dataStr = decodeURIComponent(atob(importData));
            const data = JSON.parse(dataStr);

            if (data.trips && Array.isArray(data.trips)) {
                const confirmed = confirm(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${data.trips.length} –ø–æ–µ–∑–¥–æ–∫ –∏–∑ —Å—Å—ã–ª–∫–∏?`);
                if (confirmed) {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
                    const event = {
                        target: {
                            result: JSON.stringify(data)
                        }
                    };

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
                    setTimeout(() => {
                        handleImportFile({ target: { files: [new Blob([JSON.stringify(data)], { type: 'application/json' })] } });
                    }, 1000);
                }
            }

            // –û—á–∏—â–∞–µ–º URL
            window.history.replaceState({}, document.title, window.location.pathname);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ URL:', error);
        }
    }
});